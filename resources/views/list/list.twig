{% extends 'templates/app.twig' %}

{% block pageTitle %}{{ user.username }}: {{ list.title }}{% endblock %}


{% block content %}

    {% include 'templates/modalboxes/markdown_help.twig' %}

    <div class="row">

        <div class="col-lg-6">

            <div class="card list">
                <div class="card-header">
                    <div class="row">
                        <div class="col-9">
                            <h3>{{ list.title }}</h3>
                        </div>
                        <div class="col-3 text-right">
                            [<a href="{{ path_for('userProfile.category', {user : user.username, category : list.category}) }}">{{ list.category }}</a>]
                        </div>
                    </div>
                </div>

                <div class="card-block" style="height:auto;">
                    {{ list.markdownContent() | raw }}
                </div>
            </div>

        </div>

        <div class="col-lg-6">

            <div class="card statbox">
                <div class="card-block">

                    <div class="row">
                        <div class="col-lg-6">
                            <a href="{{ path_for('userProfile', {user : list.owner().username}) }}">
                                <div class="statbox-avatar">{{ list.owner().getAvatar({size : 70}) | raw }}</div>
                                <h4 class="statbox-username align-bottom">{{ list.owner().username }}</h4>
                            </a>
                        </div>
                        <div class="col-lg-6">
                            <div class="statbox-buttons float-right">
                                {% if not list.favorite().exists(list.id, auth.user.id) %}
                                    <a href="{{ path_for('list.favorite', {id : list.id}) }}" class="btn btn-outline-success notfaved" id="fav-button" title="Favorite"><span class="icon ion-star"></span></a>
                                {% else %}
                                    <a href="{{ path_for('list.unfavorite', {id : list.id}) }}" class="btn btn-success faved" id="fav-button" title="Unfavorite"><span class="icon ion-star"> Favorited</span></a>
                                {% endif %}

                                {% if auth.user.id == list.user_id or auth.user.isAdmin() %}
                                    <a href="{{ path_for('list.edit', {id : list.id}) }}" class="btn btn-outline-primary" title="Edit list"><span class="icon ion-edit"></span></a>
                                    <a href="#" onclick="confirmDeleteList({{ list.id }});" class="btn btn-outline-danger" title="Delete list"><span class="icon ion-trash-b"></span></a>
                                {% endif %}
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <div class="card commentbox">
                <div class="card-header">
                    <h4>Comments</h4>
                </div>

                <div class="card-block">
                    {% if list.hasComments() %}
                        <div class="row">
                            <div class="col-lg-12" id="commentbox-commentContainer">
                                {% for comment in list.comments('asc') %}
                                    {% if not comment.isReply() %}
                                        {% include 'templates/comment/comment_template.twig' %}
                                    {% endif %}
                                {% endfor %}
                            </div>
                        </div>
                    {% else %}
                        <h5 class="text-muted">There are no comments on this list.</h5>
                        {% if auth.check %}<h6 class="text-muted">Be the first to reply to this list!</h6>{% endif %}
                    {% endif %}
                </div>

                <div class="card-footer" id="comment-form">
                    {% if auth.check %}
                        <h4>New Comment</h4>

                        <form action="{{ path_for('comment.list', {id : list.id}) }}" method="post" autocomplete="off" class="comment-form" id="comment-form">

                            <div class="form-group">
                                <textarea name="content" class="form-control comment {% if errors.content %}error{% endif %}" id="content" placeholder="Comment on this list">{% if old_input.content %}{{ old_input.content }}{% else %}{% endif %}</textarea>
                                {% if errors.content %} <div class="form_errors">{{ errors.content | first }}</div> {% endif %}
                                <div id="categoryHelp" class="form-text text-right text-muted">Comments support <a href="#" data-toggle="modal" data-target="#markdownHelpModal">Markdown</a></div>
                            </div>

                            <input type="hidden" name="reply_to" id="reply_to" value="">

                            <button type="submit" class="btn btn-outline-primary" data-submit-value="Creating...">Create</button>

                            {{ csrf.field | raw }}
                        </form>
                    {% else %}
                        <h4 class="text-muted">Log in to comment on this list</h4>
                    {% endif %}
                </div>
            </div>

        </div>

    </div>

    <script type="text/javascript">

        function replyForm(comment_id, comment_user) {
            if(!$('.cancel-reply-button').length) {
                $('button[type=submit]').after('<div class="cancel-reply-button"><a href="#" onclick="cancelReply();return false;">Cancel reply</a></div>');
            }
            $('textarea').attr('placeholder','Reply to '+comment_user+'\'s comment');
            setTimeout(function() { $('textarea').focus(); }, 0); // Weird fix for focus not working on textarea
            $('button[type=submit]').text("Reply");
            $('#reply_to').val(comment_id);
        }

        function cancelReply() {
            $('textarea').attr('placeholder','Comment on this list');
            $('.cancel-reply-button').remove();
            $('button[type=submit]').text("Comment");
            $('#reply_to').val("");

        }

        $('.comment-form').on('submit', function() {
            var self = $(this),
                button = self.find('button[type="submit"]'),
                submitValue = button.data('submit-value');

            button.attr('disabled', 'disabled').text((submitValue) ? submitValue : 'Please Wait...');
        });

        $("#fav-button.notfaved")
            .mouseover(function() {
                $('#fav-button').html('<span class="icon ion-star"></span> Favorite');
            })
            .mouseout(function() {
                $('#fav-button').html('<span class="icon ion-star"></span>');
            });
        $('#fav-button.faved')
            .mouseover(function() {
                $('#fav-button').removeClass('btn-success');
                $('#fav-button').addClass('btn-danger');
                $('#fav-button').empty();
                $('#fav-button').html('<span class="icon ion-close-round"></span> Unfavorite');
            })
            .mouseout(function() {
                $('#fav-button').removeClass('btn-danger');
                $('#fav-button').addClass('btn-success');
                $('#fav-button').empty();
                $('#fav-button').html('<span class="icon ion-star"></span> Favorited');
            });

        // TABBING IN TEXTAREAS
        HTMLTextAreaElement.prototype.getCaretPosition = function() { //return the caret position of the textarea
            return this.selectionStart;
        };
        HTMLTextAreaElement.prototype.setCaretPosition = function(position) { //change the caret position of the textarea
            this.selectionStart = position;
            this.selectionEnd = position;
            this.focus();
        };

        var textarea = document.getElementsByTagName('textarea')[0];

        textarea.onkeydown = function(event) {
            //support tab on textarea
            if (event.keyCode == 9) { //tab was pressed
                var newCaretPosition;
                newCaretPosition = textarea.getCaretPosition() + "    ".length;
                textarea.value = textarea.value.substring(0, textarea.getCaretPosition()) + "    " + textarea.value.substring(textarea.getCaretPosition(), textarea.value.length);
                textarea.setCaretPosition(newCaretPosition);
                return false;
            }
        }

        // SMOOTH SCROLLING
        $(function() {
            $('a[href*=#]:not([href=#])').click(function() {
                if (location.pathname.replace(/^\//,'') == this.pathname.replace(/^\//,'') && location.hostname == this.hostname) {
                    var target = $(this.hash);
                    target = target.length ? target : $('[name=' + this.hash.slice(1) +']');
                    if (target.length) {
                        $('html,body').animate({
                            scrollTop: target.offset().top
                        }, 1000);
                        return false;
                    }
                }
            });
        });

        // SCROLL COMMENTS TO THE BOTTOM
        var div = document.getElementById('commentbox-commentContainer');
        div.scrollTop = div.scrollHeight;
    </script>
{% endblock %}